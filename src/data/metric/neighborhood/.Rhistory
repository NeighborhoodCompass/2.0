geom_bar()
ggplot(data=newdata, aes(x=newdata$Year))+
geom_bar()
plot(newdata$Year, newdata$NAICS)
DBeer <- subset(newdata [ which(NAICSTitle = "Beverage & Tobacco Product Manufacturing"),]
DBeer <- subset(newdata [ which(NAICSTitle == "Beverage & Tobacco Product Manufacturing"),]
DBeer <- subset(newdata [ which(NAICSTitle == "Beverage & Tobacco Product Manufacturing"),]
k
DBeer <- subset(newdata, NAICSTitle == "Beverage & Tobacco Product Manufacturing"), ]
DBeer <- subset[ which(newdata$NAICSTitle == "Beverage & Tobacco Product Manufacturing"), ]
`0913POP_MOE` <- read.delim("C:/Users/johnki/Desktop/R/0913POP_MOE.txt")
View(`0913POP_MOE`)
library(ggplot2)
ggplot(0913POP_MOE, aes(x=ID, y=EST,
ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(0913POP_MOE, aes(x=ID, y=EST,
ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
library("colorspace", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("dichromat", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("grDevices", lib.loc="C:/Program Files/R/R-3.1.2/library")
ggplot(0913POP_MOE, aes(x=ID, y=EST,
ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(0913POP_MOE, aes(x=ID, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
moetest <- 0913POP_MOE
POP0913_MOE <- read.delim("C:/Users/johnki/Desktop/R/POP0913_MOE.txt")
View(POP0913_MOE)
pop <- POP0913_MOE
ggplot(pop, aes(x=ID, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(pop, aes(x=ID, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_bar(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(pop, aes(x=ID, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(pop, aes(x=EST, y=ID, xmin=EST-MOE, xmax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(pop, aes(x=ID, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_line(colour="red", size=1.2)+
geom_point(pch=2)+
geom_errorbar(width=0.9)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=2)+
geom_errorbar(colour="red", width=0.9)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=4)+
geom_errorbar(colour="red", width=1.5)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=3)+
geom_errorbar(colour="red", width=1.5)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=3, size=4)+
geom_errorbar(colour="red", width=1.5)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=3, width=4)+
geom_errorbar(colour="red", width=1.5)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(aes(size=qsec))+
geom_errorbar(colour="red", width=1.5)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7)+
geom_errorbar(colour="red", width=1.5)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7)+
geom_errorbar(alpha=1/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7)+
geom_errorbar(alpha=5/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7)+
geom_errorbar(alpha=8/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=5)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE), ylab="Durham County Blockgroups")+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
main="Durham County ACS Population Estimates and Confidence Intervals 2009-2013", xlab="Population Estimate", ylab="Blockgroups"
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
main="Durham County ACS Population Estimates and Confidence Intervals 2009-2013", xlab="Population Estimate", ylab="Blockgroups"+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE),main="Durham County ACS Population Estimates and Confidence Intervals 2009-2013", xlab="Population Estimate", ylab="Blockgroups")+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
k]
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
pl
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)
main="Durham COunty Population Estimates and Confidence Intervals"
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
main="Durham"
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
opts(title=expression("Durham ACS Population Estimates with Confidence Intervals, 2009-2013"))
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")
ggplot(pop, aes(x=NAME, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")
POP0913_MOE <- read.delim("C:/Users/johnki/Desktop/R/POP0913_MOE.txt")
View(POP0913_MOE)
ggplot(pop, aes(x=BG, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")
pop<- POP0913_MOE
ggplot(pop, aes(x=BG, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")
ggplot(pop, aes(x=BG, y=EST, ymin=EST-MOE, ymax=EST+MOE))+
reorder(BG, count)+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")
ggplot(pop, aes(x=reorder(BG, Count), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
bp + theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013", size=12)+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=7, size=3)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2, colour="gray")+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2, alpha=6/10)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham ACS Population Estimates with Confidence Intervals, 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2, alpha=6/10)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham Population Estimates with Confidence Intervals, ACS 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
library(shiny)
# Rely on the 'WorldPhones' dataset in the datasets
# package (which generally comes preloaded).
library(datasets)
# Define a server for the Shiny app
shinyServer(function(input, output) {
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
# Render a barplot
barplot(WorldPhones[,input$region]*1000,
main=input$region,
ylab="Number of Telephones",
xlab="Year")
})
})
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2, alpha=6/10)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham Population Estimates with Confidence Intervals, ACS 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
```{r, echo = FALSE}
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
```
renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("shiny", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("rstudio", lib.loc="C:/Program Files/R/R-3.1.2/library")
renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
library("datasets", lib.loc="C:/Program Files/R/R-3.1.2/library")
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
renderPlot({
x <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
inutPanel(
sliderInput("bw_adjust", label="Bandwidth adjustment:",
choices = c(10,20,35,50), selected = 20),
selectInput("n_breaks", label="Number of bins:"),
min=0.2, max=2, value=1, step=0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main="Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main="Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
View(POP0913_MOE)
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2, alpha=6/10)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham Population Estimates with Confidence Intervals, ACS 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
library(ggplot2)
ggplot(pop, aes(x=reorder(BG, EST), y=EST, ymin=EST-MOE, ymax=EST+MOE))+
geom_point(pch=15, size=2, alpha=6/10)+
geom_errorbar(alpha=3/10)+
ggtitle("Durham Population Estimates with Confidence Intervals, ACS 2009-2013")+
xlab("Blockgroups")+
ylab("Population Estimate")+
theme(axis.ticks = element_blank(),axis.text.x = element_blank())
> a <- makeVector(c(5,1,3))
> a$get()
[1] 5 1 3
> a <- makeVector(c(5,1,3))
> a$get()
a <- makeVector(c(5,1,3))
a$get()
a <- makeVector(c(5,1,3))
library("stats", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("stringr", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("swirl", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("tools", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("rstudio", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("formatR", lib.loc="C:/Program Files/R/R-3.1.2/library")
a <- makeVector(c(5,1,3))
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
m <- matrix(c(-1, -2, 1, 1), 2,2)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
m
x$get()
x <- makeCacheMatrix(m)
install.packages(plotly)
install.packages("plotly")
##load csv
> mls <- read.csv("mls10_14BGNH.csv", header = TRUE, sep = ",")
> head(mls)
##format date and add year field
mls <- mutate(mls, DATE = as.Date(CLOSEDATE, format = "%m/%d/%Y"), YEAR = year(DATE))
## CPI adjustment
require(lubridate) || install.packages("lubridate")
require(dplyr) || install.packages("dplyr")
monthly_cpi <-
read.csv("http://research.stlouisfed.org/fred2/data/CPIAUCSL.csv", header = TRUE)
monthly_cpi$YEAR <- year(monthly_cpi$DATE)
yearly_cpi <- monthly_cpi %.% group_by(YEAR) %.% summarize(cpi = mean(VALUE))
yearly_cpi$adj_factor <- yearly_cpi$cpi/yearly_cpi$cpi[yearly_cpi$YEAR == 2014]
##join mls and annual cpi tables
mlscpi <- merge(mls, yearly_cpi, by = "YEAR")
##adjust list and sale values
mlsadj <- mutate(mlscpi, LISTADJ = (LIST/adj_factor), SOLDADJ = (SOLD/adj_factor), ADJPPSF = (SOLDADJ/LIV_SQFT))
##Sort by order of longest days on market
#ddply(mls,"NAME",summarise, medsv=median(SOLD),meddm=median(DAYSONM), medrealppsf=median(ADJPPSF))
#mlsNH10_14_Medval_Meddom <- ddply(mls,"NAME",summarise, medsv=median(SOLD),meddm=median(DAYSONM), medrealppsf=median(ADJPPSF))
#mlsNH10_14_Medval_Meddom[order(mlsNH10_14_Medval_Meddom$meddm, decreasing = TRUE), ]
## with count field for neighborhoods
#ddply(mlsadj,"NAME",summarise, ct=length(NAME), medsv=median(SOLD),medrealsv=median(SOLDADJ), meddm=median(DAYSONM))
mlsNH10_14_Medval_Meddom <- ddply(mlsadj,"NAME",summarise, ct=length(NAME), medsv=median(SOLD),medrealsv=median(SOLDADJ), meddm=median(DAYSONM))
## with count field for blockgroups
#ddply(mlsadj,"GEOID10",summarise, ct=length(GEOID10), medsv=median(SOLD),medrealsv=median(SOLDADJ), meddm=median(DAYSONM), medrealppsf=median(ADJPPSF))
mlsBG10_14_Medval_Meddom <- ddply(mlsadj,"GEOID10",summarise, ct=length(GEOID10), medsv=median(SOLD),medrealsv=median(SOLDADJ), meddm=median(DAYSONM), medrealppsf=median(ADJPPSF))
##Export to csv
write.table(mlsNH10_14_Medval_Meddom, file = "mlsnh_medsval_dom_1014.csv", sep = ",", col.names = NA)
write.table(mlsBG10_14_Medval_Meddom, file = "mlsbg_medsval_dom_1014.csv", sep = ",", col.names = NA)
write.table(mlsadj, file = "mls_cpiadj_2010_2014.csv", sep = ",", col.names = NA)
##Values by year by neighborhood
#ddply(mlsadj,"YEAR",summarise, ct=length(NAME), medsv=median(SOLDADJ),meddm=median(DAYSONM))
##plot sales by sq ft over time
require(ggplot2) || install.packages("ggplot2")
CLH <- mlsadj[which(mlsadj$NAME=="Cleveland-Holloway"),]
ggplot(data=CLH, aes(x=DATE, y=SALE_LIST)) +
geom_line(aes(color=NAME), size=1) +
scale_x_date("DATE") +
scale_y_continuous("Sold Amt (2014 $)")
OWD <- mlsadj[which(mlsadj$NAME=="Old West Durham"),]
ggplot(data=OED, aes(x=DATE, y=SALE_LIST)) +
stat_summary(fun.y = mean, geom="line")
scale_x_date("DATE") +
scale_y_continuous("Sold Amt (2014 $)")
##Group by year
#mls_year <- group_by(mlsadj, YEAR, NAME)
#summarise(mls_year, medppsf=median(ADJPPSF))
#nhmedian <-aggregate(mls_year, by=list(mls_year$NAME,mls_year$YEAR),
FUN=mean, na.rm=TRUE)
#tapply(mls_year$ADJPPSF, mls_year$YEAR, FUN=median)
#ddply(mls_year, c('NAME', 'YEAR'), function(x),median=median(mls_year$ADJPPSF))
library('reshape2')
#nhmed <- melt(mls_year, id.vars = c("NAME", "YEAR", "ADJPPSF"), na.rm=TRUE)
nhmed <- cast(NAME ~ YEAR, data = mls_year, fun = median, na.rm = TRUE)
write.table(nhmed, file = "nhmed_pricepersquareft_mls_20102014.csv", sep = ",", col.names = NA)
bgmed <- cast(GEOID10 ~ YEAR, data = mls_year, fun = median, na.rm = TRUE)
write.table(nhmed, file = "nhmed_pricepersquareft_mls_20102014.csv", sep = ",", col.names = NA)
write.table(bgmed, file = "bgmed_pricepersquareft_mls_20102014.csv", sep = ",", col.names = NA)
mls <- read.csv("nhmed_pricepersquareft_mls_20102014.csv", header = TRUE, sep = ",")
head(mls)
#format date and add year field
mls <- mutate(mls, DATE = as.Date(CLOSEDATE, format = "%m/%d/%Y"), YEAR = year(DATE))
> mls <- read.csv("mls10_14BGNH.csv", header = TRUE, sep = ",")
getwd()
install.packages("httr")
library("httr")
example <- GET(“http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA“)
content(example)
example <- GET('http://api.data.gov/nrel/utility_rates/v3.json?api_key=sample_key&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA')
content(example)
example <- GET('http://api.data.gov/nrel/utility_rates/v3.json?api_key=zduam65kShVpQRaJAgGv7u4vRT1LgKT3OHcMvLqx&address=1600+Amphitheatre+Parkway,+Mountain+View,+CA')
content(example)
key <- 'zduam65kShVpQRaJAgGv7u4vRT1LgKT3OHcMvLqx'
add1 <- '1600 Amphitheatre Parkway, Mountain View, CA'
example2 <- GET('http://api.data.gov/nrel/utility_rates/v3.json', query = list(api_key = key, address = add1))
result2 <- content(example2)
result2
hmdatest <- GET('https://api.consumerfinance.gov/data/hmda')
head(hmdatest)
hmdatest <- GET('https://api.consumerfinance.gov/data/hmda/slice/hmda_lar.json?#!/lien_status=1&loan_purpose=1&action_taken=1&select=as_of_year,loan_type_name,count&section=summary')
head(hmdatest)
hmdatest <- GET('https://api.consumerfinance.gov/data/hmda/slice/hmda_lar.json?#!/property_type=1,2&action_taken=1&select=as_of_year,loan_purpose_name,count&section=summary')
head(hmdatest)
hmdatest <- GET('https://api.consumerfinance.gov//data/hmda/concepts/co_applicant_ethnicity')
head(hmdatest)
setwd(C:/Users/johnki/Desktop/Data Requests/Wanda_Boone)
setwd("C:/Users/johnki/Desktop/Data Requests/Wanda_Boone")
require(reshape)
require(plyr)
require(dplyr)
require(foreign)
require(lubridate)
require(magrittr)
ageBG <- read.dbf("medgAge_2014_bgsPACs_pop.dbf", as.is=FALSE)
head(ageBG)
install.packages("matricStats")
install.packages("matrixStats")
library(matrixStats)
ageOne < filter(ageBG, PAC == 1)
a1 <- filter(ageBG, PAC == 1)
head(a1)
a1 <- filter(ageBG, PAC == 1)
a2 <- filter(ageBG, PAC == 2)
a3 <- filter(ageBG, PAC == 3)
a4 <- filter(ageBG, PAC == 4)
a5 <- filter(ageBG, PAC == 5)
weightedMedian(a1$y_2014,a1$Total)
w1 <- weightedMedian(a1$y_2014,a1$Total)
w2 <- weightedMedian(a2$y_2014,a2$Total)
w3 <- weightedMedian(a3$y_2014,a3$Total)
w4 <- weightedMedian(a4$y_2014,a4$Total)
w5 <- weightedMedian(a5$y_2014,a5$Total)
w1
w2
w3
w4
w5
w <- weightedMedian(ageBG$y_2014,ageBG$Total)
w
data.frame(w1, w2, w3, w4, w5)
data.frame(w1, w2, w3, w4, w5, row.names = "MedAge")
names(df) <- c("Pac 1","Pac 2", "PAC 3", "PAC 4", "PAC 5")
df <- data.frame(w1, w2, w3, w4, w5, row.names = "MedAge")
names(df) <- c("Pac 1","Pac 2", "PAC 3", "PAC 4", "PAC 5")
df
install.packages("xtable")
library(xtable)
print(xtable(df, type="html"))
print(xtable(df,))
xtable(df)
t <- xtable(df, type="html")
t
print.xtable(t, type="html", file = "PACMedAges.html")
df <- data.frame(w1, w2, w3, w4, w5, row.names = "MedAge (2014)")
names(df) <- c("PAC 1","PAC 2", "PAC 3", "PAC 4", "PAC 5")
t <- xtable(df, type="html")
print.xtable(t, type="html", file = "PACMedAges.html")
print.xtable(t, type="csv", file = "PACMedAges.csv")
print.xtable(t, type="PDF", file = "PACMedAges.pdf")
setwd("C:/Users/johnki/Desktop/GitHub/2.0/src/data/metric/neighborhood)
setwd("C:/Users/johnki/Desktop/GitHub/2.0/src/data/metric/neighborhood")
setwd("C:/Users/johnki/Desktop/GitHub/2.0/src/data/metric/neighborhood")
require(reshape)
require(plyr)
require(dplyr)
require(foreign)
require(lubridate)
require(magrittr)
require(reshape)
require(plyr)
require(dplyr)
require(foreign)
require(lubridate)
require(magrittr)
ndu <- read.dbf("dDU.dbf", as.is=FALSE)
head(ndu)
names(ndu) <- c("oid","id","y_2013","y_2014","y_2015","y_2016")
head(ndu)
write.table(ndu, file = "dRCODE.csv", sep = ",", na.rm=TRUE, row.names = FALSE)
write.table(ndu, file = "dRCODE.csv", sep = ",", na="", row.names = FALSE)
